---
title: "First Steps with R and RStudio"
author: "Matt Steele"
format: 
  revealjs:
    theme: white
    transition: slide
editor: visual
execute: 
  eval: false
---

## Welcome

-   [Matt Steele](https://directory.lib.wvu.edu/employee/210/)
-   [Data Cleaning and Analysis with R and RStudio](https://wvu.libcal.com/event/13158087)
-   [Data Visualization and Presentation with R and RStudio](https://wvu.libcal.com/event/13158090)
-   [WVU Data Services Youtube Channel](https://www.youtube.com/playlist?list=PLVwupjN09QKVMYX_4I_F2cnDzTW-uz4iL)

## Resources

-   [Official Site for R and Comprehensive R Archive Network (CRAN)](https://cran.r-project.org/)

-   [Official Site for POSIT/RSTUDIO](https://rstudio.com/)

-   [O'Reilly Learning Platform](https://databases.lib.wvu.edu/connect/1540334373)

    -   R for Data Science, 2nd Edition

    -   R Programming for Statistics and Data Science

-   [Postit/RStudio Youtube Page](https://www.youtube.com/@PositPBC)

-   [R for Data Science Youtube Page](https://www.youtube.com/@r4ds)

## Why Use R and RStudio

-   Open-source

    -   Free

    -   Platform independent

    -   Reproducible

    -   Shareable

    -   Contains add-on packages

-   Created for data statistical computation and graphic export

## File Types

::: r-fit-text
**R Script**: create code based text file that allows you to save and execute code at your discretion

> *File \> New File \> R Script*

<br />

**R Markdown** or **Quarto Document**: allows you to combine narrative text, code, and the output of code in a single document.

> *File \> New File \> R Markdown*

> *File \> New File \> Quarto Document*
:::

## RStudio

RStudio is an Integrated Development Environment (IDE) that allows you to save you code, store your variables and environments and view outputs.

## Source Pane

<img src="source_pane.png" alt="source_pane" width="75%"/>

## Source Pane

this pane is opened when you create or open a markdown or script file.

-   This area is where you can create code in script or markdown files

## Console Pane

<img src="console_pane.png" alt="console_pane" width="75%"/>

## Console Pane

This is where you interact with the R. The results of your commands are displayed in this pane.

-   Useful for testing code and exploring data

## Environment Pane

<img src="environment_pane.png" alt="envir_pane" width="75%"/>

## Environment Pane

view functions, objects, and data sets that are stored here

-   Your environment can be saved and accessed at any point
-   Save your environment to your working directory

## Misc Pane

<img src="misc_pane.png" alt="misc_pane" width="75%"/>

## Misc Pane

view files, plots, packages, and get help

## Set Your Preferences

> *Tools \> Global Options*

<br>

Some suggested Preferences to set:

-   Code \> Editing \> Use Native Pipe Operator

-   Code \> Editing \> Soft wrap source R files

## Working Directory

the folder that you are working in, where you store your files, and where you load your files.

> *Session \> Set Working Directory \> Choose Directory*

<br>

```{r}
#| label: setwd
#| echo: true
#| eval: false


getwd() # show current directory that you are in


setwd("path/to/your/directory") # sets the working directory


```

## Keyboard Shortcuts

> *Tools \> Keyboard Shortcuts Help*

<br>

|                         | PC               | MAC             |
|-------------------------|:-----------------|:----------------|
| **Run Code**            | CTRL + ENTER     | CMD + RETURN    |
| **Assignment Operator** | ALT + -          | OPTION + -      |
| **Pipe Operator**       | CTRL + SHIFT + M | CMD + SHIFT + M |

## Comments

used to provide context, documentation, and explanations for the code.

<br>

```{r}
#| label: comments
#| eval: false
#| echo: true

mean(mtcars$mpg) # get the mean of the mpg variable

```

## Functions

used to give commands to perform a tasks.

<img src="toolbox.png" alt="toolbox" width="25%"/>

<br>

```{r}
#| label: example function
#| eval: false
#| echo: true

sample(1:5000)

mean(c(1, 3, 500))

str(400)

```

::: notes
ready-made tools or functions that you can use in the R programming language. Imagine you have a toolbox, and in that toolbox, you have different tools for various tasks like measuring, cutting, or fixing things.
:::

## Arguments

used to provide the details about how your function operates

<img src="hammer.jpg" alt="hammer" width="55%"/>

<br>

```{r}
#| label: example arguments
#| eval: false
#| echo: true

sample(1:5000, size = 50, replace = TRUE)

sample(1:5000, 50, TRUE)

```

::: notes
arguments in R as the ingredients or details you provide to a function, like telling a chef how to prepare your food. These arguments help customize what the function does, and the function's output is like the dish you receive based on your requests.
:::

## Documentation

provides the necessary information, explanations, examples, and guidance to help you learn, understand, and effectively use R functions and packages.

<br>

-   [Base R Function Documentation](https://stat.ethz.ch/R-manual/R-devel/library/base/html/00Index.html)
-   [Dplyr Documentation](https://dplyr.tidyverse.org/reference/index.html)
-   Get help with a package, function, or argument within R. Using **(?)** or **help("**name of function")
-   The **TAB** button will also provide help with suggestions and auto-filling options

## Objects

used to store and work on data (numbers, words, tables, and more).

<img src="drawer.png" alt="drawer" width="55%"/>

::: notes
"object" is a fundamental concept that can be thought of as a container or a holder for data. Just like in everyday life, you use different containers like bags, boxes, or drawers to store and organize your things
:::

## Assignment Operator (\<-)

used to create an object

<br>

|                         | PC      | MAC     |
|-------------------------|:--------|:--------|
| **Assignment Operator** | ALT + - | CMD + - |

<br>

```{r}
#| label: example object
#| eval: false
#| echo: true

a <- 35
b <- 45

a
a + b
```

## Naming Objects

-   Use descriptive and meaningful names that indicate the purpose of the object
-   Use lowercase letters.
-   Use underscores to separate words (e.g., my_variable_name).
-   Avoid using reserved words or functions (e.g., "if," "else," "for," "function").

## Data Types

::: r-fit-text
<br />

| type                  | values                                                                                                |
|-------------------|-----------------------------------------------------|
| **Double or Numeric** | used for numbers which can be integers (whole numbers) or real numbers (numbers with decimal points). |
| **Character**         | used for text, words, and strings of characters. Enclose in double ("") or single ('') quotes.        |
| **Factor**            | used to represent categorical data with predefined levels.                                            |
| **Date**              | used for handling dates, times, and time intervals.                                                   |
| **Boolean**           | used for decision-making and represented by binary values, typically **`TRUE`** or **`FALSE`**        |
:::

## Packages

R packages are like toolkits or collections of pre-built functions, data sets, and tools that extend the capabilities of the R programming language.

## Packages

<br>

#### Install

You must install a package before you can load it. *But you only need to install it one time.*

```{r}
#| label: install packages
#| eval: false
#| echo: true

install.packages("tidyverse")

```

<br>

#### Load

For every new session, you must load the package to use the it's functions.

```{r}
#| label: load package
#| eval: false
#| echo: true

library(tidyverse)

```

## Vectors

ordered collections of data items of the same type.

<img src="row.png" alt="table row" width="55%"/>

<br>

```{r}
#| label: example vectors
#| eval: false
#| echo: true

vec_one <- c(1,2,3)
vec_two <- c(4:6)

vec_two

```

## Data Frame

two-dimensional sequence of data variables (columns) and observations (rows). While each variable in a data frame typically contains data of the same type, different variable can contain different data types.

<br>

```{r}
#| label: create data frame
#| eval: false
#| echo: true

# create vectors
title <- c("Star Wars", "The Empire Strikes Back", "Return of the Jedi")
year <- c(1977, 1980, 1983)
length.min <- c(121, 124, 133)
box.office.mil <- c(787, 534, 572)
  
# combine these vectors with the data.frame() function

  starWars.data <- data.frame(title, year, length.min, box.office.mil)
  starWars.data

```

## Subsetting Variables

used to select and work with specific variables (columns) from a data frame.

<br>

```{r}
#| label: subsetting
#| eval: false
#| echo: true

starWars.data$year
```

## Export / Save Data

Once you are done entering your data, you can export it to your working directory. The function without built-in arguments is **write.table( )** but if are saving it as a csv, you are better using **write.csv( )**.

<br>

```{r}
#| label: export files
#| eval: false
#| echo: true

write.csv(starWars.data, "starwars.csv")
```

## Load Data

load data from a file in your working directory using the **read_csv()** function from tidyverse. There is also the **read.csv( )** function in base R.

<br>

```{r}
#| label: read data
#| eval: false
#| echo: true

fight_songs <- read_csv("fight-songs.csv")

```

## Explore Data

<br>

```{r}
#| label: explore
#| eval: false
#| echo: true

view(fight_songs) # view in a new tab

nrow(fight_songs) # number of rows

ncol(fight_songs) # number of columns

str(fight_songs) # structure of data frame

```

## Descriptive Statistics

<br>

```{r}
#| label: descriptive statistics
#| eval: false
#| echo: true


summary(fight_songs) # various descriptive statistics

sum(fight_songs$number_fights) # sum a variable

mean(fight_songs$number_fights) # average a variable

median(fight_songs$number_fights) # middle value of a variable

sd(fight_songs$number_fights) # standard deviation of a variable

min(fight_songs$number_fights) # minimum value of a variable

max(fight_songs$number_fights) # maximum value of a variable

```

## Conclusion

-   [Matt Steele](https://directory.lib.wvu.edu/employee/210/)
-   [Data Cleaning and Analysis with R and RStudio](https://wvu.libcal.com/event/13158087)
-   [Data Visualization and Presentation with R and RStudio](https://wvu.libcal.com/event/13158090)
-   [WVU Data Services Youtube Channel](https://www.youtube.com/playlist?list=PLVwupjN09QKVMYX_4I_F2cnDzTW-uz4iL)
